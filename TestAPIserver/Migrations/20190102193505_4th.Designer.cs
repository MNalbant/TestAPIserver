// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TestAPIserver.Models;

namespace TestAPIserver.Migrations
{
    [DbContext(typeof(DBContext))]
    [Migration("20190102193505_4th")]
    partial class _4th
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.4-rtm-31024")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("TestAPIserver.Models.Address", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Addition")
                        .IsRequired();

                    b.Property<int>("HouseNumber");

                    b.Property<string>("StreetName")
                        .IsRequired();

                    b.Property<string>("ZipCode")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("Addresses");
                });

            modelBuilder.Entity("TestAPIserver.Models.ClosedAnswer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("QuestionId");

                    b.Property<bool>("Response");

                    b.Property<string>("Title");

                    b.HasKey("Id");

                    b.HasIndex("QuestionId");

                    b.ToTable("ClosedAnswer");
                });

            modelBuilder.Entity("TestAPIserver.Models.Company", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("Companies");
                });

            modelBuilder.Entity("TestAPIserver.Models.OpenAnswer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("Question");

                    b.Property<string>("Response");

                    b.Property<string>("Title");

                    b.HasKey("Id");

                    b.HasIndex("Question")
                        .IsUnique()
                        .HasFilter("[Question] IS NOT NULL");

                    b.ToTable("OpenAnswer");
                });

            modelBuilder.Entity("TestAPIserver.Models.Question", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("QuestionType");

                    b.Property<int?>("SurveyId");

                    b.Property<string>("_Question");

                    b.HasKey("Id");

                    b.HasIndex("SurveyId");

                    b.ToTable("Question");
                });

            modelBuilder.Entity("TestAPIserver.Models.Survey", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CompanyId");

                    b.Property<string>("Description");

                    b.Property<DateTime>("EndDate");

                    b.Property<string>("Name");

                    b.Property<int>("Reward");

                    b.Property<DateTime>("StartDate");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.ToTable("Surveys");
                });

            modelBuilder.Entity("TestAPIserver.Models.SurveyUser", b =>
                {
                    b.Property<int>("SurveyId");

                    b.Property<int>("UserId");

                    b.HasKey("SurveyId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("SurveyUsers");
                });

            modelBuilder.Entity("TestAPIserver.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AddressId");

                    b.Property<string>("FirstName");

                    b.Property<string>("LastName");

                    b.Property<string>("Mail");

                    b.Property<string>("Password");

                    b.Property<int>("PhoneNumber");

                    b.Property<bool>("Sex");

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("TestAPIserver.Models.ClosedAnswer", b =>
                {
                    b.HasOne("TestAPIserver.Models.Question", "Question")
                        .WithMany("ClosedAnswers")
                        .HasForeignKey("QuestionId");
                });

            modelBuilder.Entity("TestAPIserver.Models.OpenAnswer", b =>
                {
                    b.HasOne("TestAPIserver.Models.Question", "question")
                        .WithOne("OpenAnswer")
                        .HasForeignKey("TestAPIserver.Models.OpenAnswer", "Question");
                });

            modelBuilder.Entity("TestAPIserver.Models.Question", b =>
                {
                    b.HasOne("TestAPIserver.Models.Survey")
                        .WithMany("Questions")
                        .HasForeignKey("SurveyId");
                });

            modelBuilder.Entity("TestAPIserver.Models.Survey", b =>
                {
                    b.HasOne("TestAPIserver.Models.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId");
                });

            modelBuilder.Entity("TestAPIserver.Models.SurveyUser", b =>
                {
                    b.HasOne("TestAPIserver.Models.Survey", "Survey")
                        .WithMany("SurveyUsers")
                        .HasForeignKey("SurveyId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("TestAPIserver.Models.User", "User")
                        .WithMany("SurveyUsers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("TestAPIserver.Models.User", b =>
                {
                    b.HasOne("TestAPIserver.Models.Address", "Address")
                        .WithMany()
                        .HasForeignKey("AddressId");
                });
#pragma warning restore 612, 618
        }
    }
}
